{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN개고양이실습.ipynb","provenance":[],"collapsed_sections":[],"mount_file_id":"1zc7rZtVBBUOxjZgfN5OPcgQpnpX2BFE6","authorship_tag":"ABX9TyOc0tMrXnYF1RyFOMlYS5nR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"X68oLkGt4R4x","executionInfo":{"status":"ok","timestamp":1631498412691,"user_tz":-540,"elapsed":322,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["import os"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"J_uDaExB4h98","executionInfo":{"status":"ok","timestamp":1631502592374,"user_tz":-540,"elapsed":309,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["train_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/train'\n","test_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/test'\n","validation_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/validation'\n","\n","train_dogs_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/train/dogs'\n","train_cats_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/train/cats'\n","\n","test_dogs_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/test/dogs'\n","test_cats_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/test/cats'\n","\n","validation_dogs_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/validation/dogs'\n","validation_cats_dir = 'drive/MyDrive/Colab Notebooks/dogs_vs_cats_small/validation/cats'"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"2W3JuWlzIeZx"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yy0xWd4U5edH","executionInfo":{"status":"ok","timestamp":1631499096864,"user_tz":-540,"elapsed":494,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"02a4e380-3d2e-4d62-e1a8-61560effa3e2"},"source":["# listdir() : 해당 폴더에 있는 파일을 가져온다\n","os.listdir(train_dir)"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['cats', 'dogs']"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vwMNy7El7I2t","executionInfo":{"status":"ok","timestamp":1631500304137,"user_tz":-540,"elapsed":4831,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"785a4b76-7460-4f61-cabe-848ff2373c62"},"source":["#listdir() : 해당 폴더에 있는 파일을 가져온다\n","len(os.listdir(train_dir))\n","print(\"훈련 개 데이터 수 : {}\".format(len(os.listdir(train_dogs_dir))))\n","print(\"훈련 고양이 데이터 수 : {}\".format(len(os.listdir(train_cats_dir))))\n","\n","print(\"테스트 개 데이터 수 : {}\".format(len(os.listdir(test_dogs_dir))))\n","print(\"테스트 고양이 데이터 수 : {}\".format(len(os.listdir(test_cats_dir))))\n","\n","print(\"검증 개 데이터 수 : {}\".format(len(os.listdir(validation_dogs_dir))))\n","print(\"검증 고양이 데이터 수 : {}\".format(len(os.listdir(validation_cats_dir))))\n","\n"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 개 데이터 수 : 1000\n","훈련 고양이 데이터 수 : 1000\n","테스트 개 데이터 수 : 11\n","테스트 고양이 데이터 수 : 11\n","검증 개 데이터 수 : 500\n","검증 고양이 데이터 수 : 500\n"]}]},{"cell_type":"code","metadata":{"id":"E5egmwdQCnuC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bj6tTCxj_uoX"},"source":["#이미지크기와 픽셀의 크기를 맞춰주는 전처리작업 필요함\n","\n","이미지를 같은 크기로 만들어 주어야 한다.\n","\n","0-255 범위의 픽셀값을 0-1 사이의 범위로 변환.\n","\n","라벨링.(각 데이터 혹은 객채의 구분을 위해)\n","\n","imageDataGenerator() 함수를 사용\n"]},{"cell_type":"code","metadata":{"id":"Jf2S3bURA8nr","executionInfo":{"status":"ok","timestamp":1631501029191,"user_tz":-540,"elapsed":301,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"QQI06IQHCgxG","executionInfo":{"status":"ok","timestamp":1631501123459,"user_tz":-540,"elapsed":305,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["#픽셀값 0-1 사이로 변환\n","\n","train_gen = ImageDataGenerator( rescale = 1./255)\n","val_gen = ImageDataGenerator( rescale = 1./255)\n","test_gen = ImageDataGenerator( rescale = 1./255)\n"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C6pVJi1RC3x5","executionInfo":{"status":"ok","timestamp":1631503493079,"user_tz":-540,"elapsed":849,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"28aa2069-6ca0-4503-9a03-96a96457e3d1"},"source":["# fow_from_directory() : 폴더에서 이미지 가져오기\n","train_generator = train_gen.flow_from_directory( train_dir,\n","                              target_size = (150, 150),\n","                              batch_size=10,\n","                              class_mode='binary')\n","test_generator = val_gen.flow_from_directory( validation_dir,\n","                              target_size = (150, 150),\n","                              batch_size=10,\n","                              class_mode='binary')\n","val_generator = test_gen.flow_from_directory( test_dir,\n","                              target_size = (150, 150),\n","                              batch_size=10,\n","                              class_mode='binary'\n","                              # 이진분류 : binary\n","                              # 다중분류 : catagorical\n","                              # 라벨 번호는 0부터 시작함\n","\n","                              )"],"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2000 images belonging to 2 classes.\n","Found 1000 images belonging to 2 classes.\n","Found 22 images belonging to 2 classes.\n"]}]},{"cell_type":"code","metadata":{"id":"QGbIOhWoL6DI"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iLsz5wVHL2U_"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NHlnOIO8IfJo","executionInfo":{"status":"ok","timestamp":1631503494787,"user_tz":-540,"elapsed":6,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"073e0894-f2c6-4407-e3c8-d7a8eca95c49"},"source":["# 라벨링 결과 확인\n","\n","print(train_generator.class_indices)\n","print(test_generator.class_indices)\n","print(val_generator.class_indices)"],"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["{'cats': 0, 'dogs': 1}\n","{'cats': 0, 'dogs': 1}\n","{'cats': 0, 'dogs': 1}\n"]}]},{"cell_type":"code","metadata":{"id":"gelrCaBSL6rR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B9hUn7eLL3Af"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ytXJC3oDK3kT"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MDOe8RtjIWLk","executionInfo":{"status":"ok","timestamp":1631502739458,"user_tz":-540,"elapsed":399,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["import numpy as np\n","import tensorflow as tf\n","\n","seed = 0\n","np.random.seed(seed)\n","tf.random.set_seed(seed)"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Zx0PslaJCSe","executionInfo":{"status":"ok","timestamp":1631502861374,"user_tz":-540,"elapsed":316,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, InputLayer, Flatten"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"7J6uFrJoJgEk","executionInfo":{"status":"ok","timestamp":1631503708715,"user_tz":-540,"elapsed":307,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["# 1. 신경망 구조 설계\n","# 뼈대먼저\n","\n","model = Sequential()\n","\n","#입력층\n","model.add(InputLayer(input_shape=(150, 150, 3))) # Dense(input_dim)\n","#이미지 데이터일때 플래튼을 사용하면 1차원으로 펴짐\n","model.add(Flatten())\n","model.add(Dense(units=64, activation='relu'))\n","#은닉층\n","model.add(Dense(units=64, activation='relu'))\n","#출력층\n","model.add(Dense(units=1, activation='sigmoid'))"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"yiUnub-UKzsx","executionInfo":{"status":"ok","timestamp":1631503772563,"user_tz":-540,"elapsed":295,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["#2. 모델 학습/평가 방법 설정\n","\n","model.compile(\n","    loss='binary_crossentropy',\n","    optimizer='adam',\n","    metrics = ['accuracy']\n",")"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5oxR_H3_LQWO","executionInfo":{"status":"ok","timestamp":1631505759211,"user_tz":-540,"elapsed":45798,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"b5c64fcf-4af2-4918-b246-628cb86350bb"},"source":["#3.학습\n","history = model.fit_generator(generator=train_generator,\n","                    steps_per_epoch = 50,\n","                    epochs = 10,\n","                    validation_data = val_generator,  # 검증데이터로 활용\n","                    validation_steps = 25)"],"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\r 1/50 [..............................] - ETA: 3s - loss: 0.6749 - accuracy: 0.5000"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"]},{"output_type":"stream","name":"stdout","text":["50/50 [==============================] - ETA: 0s - loss: 0.7909 - accuracy: 0.5240WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 25 batches). You may need to use the repeat() function when building your dataset.\n","50/50 [==============================] - 4s 72ms/step - loss: 0.7909 - accuracy: 0.5240 - val_loss: 0.7391 - val_accuracy: 0.5455\n","Epoch 2/10\n","50/50 [==============================] - 3s 59ms/step - loss: 0.7555 - accuracy: 0.5720\n","Epoch 3/10\n","50/50 [==============================] - 4s 71ms/step - loss: 0.6646 - accuracy: 0.6080\n","Epoch 4/10\n","50/50 [==============================] - 3s 60ms/step - loss: 0.6798 - accuracy: 0.5740\n","Epoch 5/10\n","50/50 [==============================] - 3s 61ms/step - loss: 0.6691 - accuracy: 0.6240\n","Epoch 6/10\n","50/50 [==============================] - 3s 62ms/step - loss: 0.7649 - accuracy: 0.5740\n","Epoch 7/10\n","50/50 [==============================] - 3s 61ms/step - loss: 0.7071 - accuracy: 0.5060\n","Epoch 8/10\n","50/50 [==============================] - 3s 59ms/step - loss: 0.7105 - accuracy: 0.4980\n","Epoch 9/10\n","50/50 [==============================] - 3s 60ms/step - loss: 0.6991 - accuracy: 0.4940\n","Epoch 10/10\n","50/50 [==============================] - 3s 61ms/step - loss: 0.6935 - accuracy: 0.5000\n"]}]},{"cell_type":"code","metadata":{"id":"xsT0jAFyUYcg"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":642},"id":"o2RFLsMBM_Bv","executionInfo":{"status":"error","timestamp":1631505772961,"user_tz":-540,"elapsed":373,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"60d54ebe-1997-49d8-b3c5-03c4aaf90ef3"},"source":["import matplotlib.pyplot as plt\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","epoch = range(1, len(acc) + 1) #정확도의 갯수\n","\n","plt.plot(epoch, acc, c = 'red', label = 'Train acc') #훈련 데이터 정확도\n","plt.plot(epoch, val_acc, c = 'blue', label = 'Val acc') #검증 데이터 정확도\n","plt.legend() #범례\n","plt.plot()"],"execution_count":78,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-78-28c03151845f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Train acc'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#훈련 데이터 정확도\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_acc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Val acc'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#검증 데이터 정확도\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#범례\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2761\u001b[0m     return gca().plot(\n\u001b[1;32m   2762\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2763\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1645\u001b[0m         \"\"\"\n\u001b[1;32m   1646\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1647\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1648\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_next_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    343\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (10,) and (1,)"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"clSjTpGkUm5O"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L_96TGrVTMuo"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DmIRkOkeRvWF"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d4HuX2IPPA_h"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KRm279xCMzEZ"},"source":["### CNN을 입력층으로 한 신경망"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hmengs-NMPzq","executionInfo":{"status":"ok","timestamp":1631505408417,"user_tz":-540,"elapsed":301,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten\n","# Con2D : 특징찾기\n","# MAxPooling2D : 불필요한 부분 삭제\n","# Flatten : 데이터를 1차원으로 펴줌"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"id":"vTaHnMivTN6g"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TdSxQ0CKQAXl","executionInfo":{"status":"ok","timestamp":1631504984005,"user_tz":-540,"elapsed":309,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"b2e01573-93c6-42cd-9916-d45ecdc9c159"},"source":["c_model = Sequential()\n","\n","#입력층 (CNN)\n","#특징을 도드라지게 해준다.\n","\n","c_model.add(Conv2D(filters = 16, #사진에서 찾을 특성개수\n","                   kernel_size = (3,3), # 한번에 확인할 픽셀의 수\n","                   input_shape = (150,150,3), #입력 데이터의 크기\n","                   padding = 'same', #\n","                   activation = 'relu'))\n","\n","c_model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","#1차원으로 데이터 축소\n","c_model.add(Flatten())\n","\n","#은닉층\n","c_model.add(Dense(units=1, activation='sigmoid'))\n","\n","#출력층\n","c_model.add(Dense(units=1, activation='sigmoid'))\n","\n","c_model.summary"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method Model.summary of <keras.engine.sequential.Sequential object at 0x7f1b1ee36d10>>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"64W7fZDZRmTB","executionInfo":{"status":"ok","timestamp":1631505139226,"user_tz":-540,"elapsed":303,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}}},"source":["c_model.compile(loss='binary_crossentropy',\n","                optimizer='adam',\n","                metrics=['accuracy'])"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xIlsxsC-SMLi","executionInfo":{"status":"ok","timestamp":1631505337024,"user_tz":-540,"elapsed":85635,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"2976eb32-98c5-42e6-f52b-c51b884b5248"},"source":["c_history = c_model.fit_generator(generator=train_generator,\n","                        steps_per_epoch=50,\n","                        epochs=10,\n","                        validation_data = val_generator,\n","                        validation_steps = 25)"],"execution_count":71,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","50/50 [==============================] - ETA: 0s - loss: 0.7071 - accuracy: 0.5040WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 25 batches). You may need to use the repeat() function when building your dataset.\n","50/50 [==============================] - 10s 184ms/step - loss: 0.7071 - accuracy: 0.5040 - val_loss: 0.7058 - val_accuracy: 0.5000\n","Epoch 2/10\n","50/50 [==============================] - 8s 169ms/step - loss: 0.6955 - accuracy: 0.5300\n","Epoch 3/10\n","50/50 [==============================] - 9s 185ms/step - loss: 0.7003 - accuracy: 0.5080\n","Epoch 4/10\n","50/50 [==============================] - 8s 160ms/step - loss: 0.6989 - accuracy: 0.5060\n","Epoch 5/10\n","50/50 [==============================] - 7s 141ms/step - loss: 0.6953 - accuracy: 0.5160\n","Epoch 6/10\n","50/50 [==============================] - 7s 139ms/step - loss: 0.6965 - accuracy: 0.5060\n","Epoch 7/10\n","50/50 [==============================] - 7s 130ms/step - loss: 0.6958 - accuracy: 0.5040\n","Epoch 8/10\n","50/50 [==============================] - 6s 125ms/step - loss: 0.6978 - accuracy: 0.4840\n","Epoch 9/10\n","50/50 [==============================] - 7s 140ms/step - loss: 0.6989 - accuracy: 0.4580\n","Epoch 10/10\n","50/50 [==============================] - 7s 130ms/step - loss: 0.6919 - accuracy: 0.5260\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YQirodumSnon","executionInfo":{"status":"ok","timestamp":1631505551047,"user_tz":-540,"elapsed":3,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"0d812d5c-8912-480f-ac6b-fa09fe798638"},"source":[""],"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["range(1, 11)"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z6rzDMyUTwY_","executionInfo":{"status":"ok","timestamp":1631505569388,"user_tz":-540,"elapsed":325,"user":{"displayName":"꼬망이는우리개","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMCUo0SbVN27cK5EqghgdgOq846yQSJ87rpAbX_g=s64","userId":"17796835349257182650"}},"outputId":"d74260e6-2f9f-4ff3-8792-834cb0aae24c"},"source":[""],"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.5]"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"mVWvmhJxT1C5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T9i76ZFSTs6W"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DUT9xm7nTmNS"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1dc99AjISIKO"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K83i0eLTP5_y"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FpAGHpPIP5MH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hFlubz4KOlNH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F0MiUP6eLpTZ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QWhQC8HLKwTe"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FoEloDsoJWP9"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cJjpEiPOJAYf"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ebs4IGLAITpD"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IpYNhaXpIKwv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mB05Q3aQIDy0"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7_ka_xWaICJz"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Zj0K8tiDmWl"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1m2l4_lHDXOH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Nwq5BTwCz53"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U1U8obaWCfrO"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rLEJDNlcCZ_b"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K28c1dUACY6S"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oF6PQexUCS8o"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1HNkJPHXCQXH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ysnlYWLxCFgz"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LL8KTy5GCDBA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lHqhhSerB_sX"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C6Z8q2Ms_rCm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ezdq0qr__Vtk"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cKrHoF5H_TyL"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EtzQKboN_N2p"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mq9U8hS4_IUW"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dRAB1kvQ-5ZA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9pcbaO8--o1o"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5lR7_YJQ-nXY"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U2hgGlls-jcm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OUhFRZ7n-ZDv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PXpMYSeM951V"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uWvC0A_24Xrn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SMo5DXjM4WvH"},"source":[""],"execution_count":null,"outputs":[]}]}